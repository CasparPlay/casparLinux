// Copyright (c) 2015 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/ctocpp/navigation_entry_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

bool CefNavigationEntryCToCpp::IsValid() {
  if (CEF_MEMBER_MISSING(struct_, is_valid))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->is_valid(struct_);

  // Return type: bool
  return _retval?true:false;
}

CefString CefNavigationEntryCToCpp::GetURL() {
  if (CEF_MEMBER_MISSING(struct_, get_url))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_url(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefNavigationEntryCToCpp::GetDisplayURL() {
  if (CEF_MEMBER_MISSING(struct_, get_display_url))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_display_url(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefNavigationEntryCToCpp::GetOriginalURL() {
  if (CEF_MEMBER_MISSING(struct_, get_original_url))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_original_url(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefString CefNavigationEntryCToCpp::GetTitle() {
  if (CEF_MEMBER_MISSING(struct_, get_title))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_title(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefNavigationEntry::TransitionType CefNavigationEntryCToCpp::GetTransitionType(
    ) {
  if (CEF_MEMBER_MISSING(struct_, get_transition_type))
    return TT_EXPLICIT;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_transition_type_t _retval = struct_->get_transition_type(struct_);

  // Return type: simple
  return _retval;
}

bool CefNavigationEntryCToCpp::HasPostData() {
  if (CEF_MEMBER_MISSING(struct_, has_post_data))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->has_post_data(struct_);

  // Return type: bool
  return _retval?true:false;
}

CefString CefNavigationEntryCToCpp::GetFrameName() {
  if (CEF_MEMBER_MISSING(struct_, get_frame_name))
    return CefString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_string_userfree_t _retval = struct_->get_frame_name(struct_);

  // Return type: string
  CefString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

CefTime CefNavigationEntryCToCpp::GetCompletionTime() {
  if (CEF_MEMBER_MISSING(struct_, get_completion_time))
    return CefTime();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_time_t _retval = struct_->get_completion_time(struct_);

  // Return type: simple
  return _retval;
}

int CefNavigationEntryCToCpp::GetHttpStatusCode() {
  if (CEF_MEMBER_MISSING(struct_, get_http_status_code))
    return 0;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = struct_->get_http_status_code(struct_);

  // Return type: simple
  return _retval;
}


#ifndef NDEBUG
template<> base::AtomicRefCount CefCToCpp<CefNavigationEntryCToCpp,
    CefNavigationEntry, cef_navigation_entry_t>::DebugObjCt = 0;
#endif

